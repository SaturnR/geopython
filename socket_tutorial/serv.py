#!/usr/bin/env python3

import socket


'''
socket მოდული წარმოადგენს, ყველაზე საბაზისო მოდულს ქსელური პროგრამირებისთვის. 
socket მოდული შეგვიძლია გამოვიყენოთ, როგორც tcp-udp კავშირისთვის ასევე http ვებ პროტოკოლისთვის.
ამოცანის გასამარტივებლად, განვიხილოთ socket-ის გამოყენების მხოლოდ ერთი ცალკეული შემთხვევა, tcp-ip ტიპის კავშირის მეთოდის მაგალითზე.

ქვემოთ მოცემულია მარტივი tcp სერვერისა და კლიენტის კოდი.

მაგალითში სერვერი უსმენს 5000 პორტს, როდესაც კლიენტისგან მოუვა შეტყობინება, დაბეჭდავს შეტყობინებას ეკრანზე და დაუბრუნებს პასუხს კლიენტს. 

ამ შენთხვევაში სერვერის მუშაობა, პრიმიტიული ჩატსერვერის ანალოგიურია.
'''


HOST = '0.0.0.0'
PORT = 5000

''' რადგან მისამართი 0.0.0.0-ია, სერვერზე მიმართვა შესაძლებელი იქნება სხვა კომპიუტერიდანაც. '''


#სოკეტის ობიექტი შექმნა, tcp ip კავშირისთვის ხდება შემდეგნაირად
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
'''
სადაც AF_INET ატრიბუტი გულისხმობს ip4-ს, ხოლო  SOCK_STREAM ატრიბუტით
ხდება სოკეტის კონფიგურაცია TCP-IP რეჟიმისთვის, თუ გვინდა UDP მაშინ
socket ობიექტს ვქმნით SOCK_DGRAM  ატრიბუტით 
'''


# bind ფუნქციით  ხდება სოკეტ ობიექტის მიბმა კონკრეტულ მისამართზე და პორტზე
s.bind((HOST, PORT))

''' listen ფუნქციით ხდება რიგში მაქსიმალური რაოდენობის გავშირის განსაზღვრა,
თუ მიმდინარე კავშირის დროს სერვერს კიდევ დაუკავშირდა სხვა კლიენტი, 
ასეთ შემთხვევაში ახალ კლიენტს გადაიყვანს მოლოდინის რეჟიმში. 
მოლოდინის რეჟიმში იქნება მაქსიმუმ 5 კლიენტი, ხოლო მე-6-ე შეერთება იქნება უარყოფილი'''

s.listen(5)

''' 
იმისთვის, რომ სერვერმა უწყვეტად შეძლოს სხვადახვა კლიენტებთან კაშირი,
აუცილებელია ჩაკეტილი ციკლი, ჩვენს შემთხვევაში ციკლი მუდმივია'''

while True:
    
    '''
    accept მეთოდით იხსნება პორტი (ჩვენს შემთხვევაში 5000) და სერვერი გადადის 
    მოსმენის რეჟიმში, პროცესი ჩერდება (accept ფუქნციის შიგნით while ციკლის 
    მსგავსი ივენთ მენეჯერი მუდმივად ამოწმებს, მოვიდა თუ არა რაიმე ინფორმაცია 
    პორტზე) მოცემულ ადგილას, მანამ სანამ კლიენტი არ დაუკავშირდება სერვერს, 
    არ მიაწვდის მონაცემებს და არ დახურავს პორტს
    '''
    
    client_socket, addr = s.accept()

    
    print('Connected to {}'.format(addr))

    # კლიენტისგან  ინფორმაციის მიღება.
    # პარამეტრი 1024 გასაზღვრავს ბუფერის სიდიდეს ბაიტებში.
    # მოცემულ შემთხვევაში ერთ ჯერზე მაქსიმუმ 1024 ბაიტის მიღება იქნება შესაძლებელი  
    data = client_socket.recv(1024)

    print('Received: ', data.decode('utf-8'))
    
    message = 'Hello from python server'

    ''' კლიენტთან კავშირის დამყარების შემდეგ, შევიძლია კლიენტს გაუგზავნოთ რაიმე ინფორმაცია.
    იმ შემთხვევაში თუ გვინდა სტრინგის გაგზავნა, აუცილებელია მისი ბაიტკოდად გარდაქმნა. '''
    
    client_socket.send(message.encode('utf-8'))
    

    # კლიენტთან კავშირის გაწყვეტა
    client_socket.close()
    
    
