* *ცოტა რამ CPyhton კომპილატორზე*

Python ცნობილია როგორც ინტერპრეტირებადი პროგრამირების ენა, მაგრამ დღევანდელ დროს, პითონი ნაწილობრივ კომპილირებად ანადაც მოიაზრება. 
პითონზე წერის დროს, ადვილად შენიშნავთ __pycache__ ფოლდერს, რომელშიც .pyc გაფართოების ფაილებია თავმოყრილი. თუ *.pyc ფაილის გახსნას შევეცდებით ვნახავთ, რომ ის რაღაც ბინარული კომპილირებული ფაილია. მთელი საიდუმლო იმაში მდგომარეობს, რომ მოცემული ფაილები არის, ძირითად პროგრამაში იმპორტირებული ყველა მოდულის, დაკომპილირებული ვარიანტი. შეიძლება ვიკითხოდ, თუ რისთვის გამოიყენება ან საერთოდ რაში დასჭირდათ მსგავსი ტქნოლოგიის შემოტანა პითონში. 
ამ კითხვაზე პასუხი შეგვიძლია მივიღოთ მარტივი მაგალითის განხილვით.


გვაქვს ციკლი, მაგ.
#+BEGIN_SRC python

for n in range(10**8):
  pass

#+END_SRC

მოვახდინოთ მოცემული კოდის "ბენჩმანკინგი" შემდეგნაირად
time python main.py 
სადაც main.py ის ფაილია სადაც ზემოთ მოცემული კოდია ჩაწერილი

დავიმახსოვროდ დრო თუ რამდენ ხანში შესრულდება კოდი, შემდეგ გადავაკეთოთ ჩვენი კოდი ისე, რომ აღნიშნული კოდი გავიტანოთ ცალკე მოდულის სახით და 
მოვახდინოთ იმპორტირებული მოდულიდან ფუნქციის შესრულება მაგ.

*tst.py მოდული*

#+BEGIN_SRC python
def loop():
    for n in range(10**8):
      pass
#+END_SRC

*main.py ფაილი*

#+BEGIN_SRC python
import tst 

tst.loop()
#+END_SRC

time python main.py -ით ვნახოთ თუ რამდენ ხანში შესრულდება მოქმედება

დავინახავთ რომ პროცესი დაჩქარდა რამდენადმე და ეს მოხდა ზუსტად კოპილირების ხარჯზე, ასევე შევნიშნავთ რომ __pycache__ ფოლდერში გაჩნდა მოდულის შესაბამისი .pyc ფაილი.

მთელ ამ კომპილირების პროცესსზე პასუხიმგებელია CPython კომპილატორი რომელიც კოდს აკომპილირებს არა პროცესორისთვის გასაგებ ბინარულ ფორმატში, არამედ შუალედურ ენაში (რაღაც java-ს და .net-ის მსგავსად), რომელსაც ასრულებს პითონის ვირტუალური მანქანა. გარდა იმისა რომ კომპილირებით პროგრამის შესრულების სიჩქარე იზრდება ასე თუ ისე, კომპილირებული მოდულების იმპორტიც გაცილებით სწრაფად ხდება, რადგან ინტერპრეტატორს არ უწევს ყოველჯერზე ჩვეულებრივი მაგ. utf-8 ფაილის წაკითხვა და გაპარსვა (სტრინგიდან მნიშვნელობების ამოღება).
დამატებით ავღნიშნოთ ისიც, რომ CPython - აკომპილირებს ძირითად ფაილსაც, ოღონთ არა ლოკალურ დირექტორიაში. ძირითად main.py ფაილში, კოდის ფუნქციის შიგნით მოთავსებაც იგივე შედეგს მოგვცემდა.

შეიძლება დაგვჭირდეს როდისმე დაკომპილირებული ფაილის გარჩევა, მაგალითად დებაგირებისთვის ან თუნდაც უბრალო ინტერესისთვის. ამის მარტივად გაკეთება შეგვიძლია dis მოდულით. მაგ.

#+BEGIN_SRC python
import dis

import tst 


dis.dis(tst.loop)
#+END_SRC

რომელიც დაგვიბრუნებს პასუხს

#+BEGIN_SRC asm

  4           0 SETUP_LOOP              20 (to 23)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               3 (100000000)
              9 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             12 GET_ITER
        >>   13 FOR_ITER                 6 (to 22)
             16 STORE_FAST               0 (n)

  5          19 JUMP_ABSOLUTE           13
        >>   22 POP_BLOCK
        >>   23 LOAD_CONST               0 (None)
             26 RETURN_VALUE

#+END_SRC
დამატებითი რესურსები

1. https://www.youtube.com/watch?v=GNPKBICTF2w
2. http://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function
3. https://tech.blog.aknin.name/category/my-projects/pythons-innards/
4. https://www.youtube.com/watch?v=HVUTjQzESeo

