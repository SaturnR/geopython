* სანამ პროგრამირების სწავლას დავიწყებთ
სამწუხაროდ ჯერ კიდევ არ არსებობს ისეთი პროგამირების ენა რომელიც ჩვენი მითითებებით ინტუიციურად
განსაზღვრავს თუ როგორ მართოს კომპიუტერი. იმისთივს რომ ინტუიციურად დავაპროგრამოთ კომპიუტერი საჭიროა პროგრამა, რომელიც ჩვენს მითითებებს გაიგებს როგორც ადამიანი და ეცოდინება თუ როგორ მიმართოს კომპიუტერს. მარტივად რომ ვთქვათ, ეს უნდა იყოს ხელოვნური ინტელექტის მქონე პროგრამა, რომელიც ისევე იფიქრებს და იაზროვნებს როგორც ადამიანი.  
ისეთ პროგრამულ მოდელს რომელიც მოქმედებს როგორც ბუნებრივი ტვინი ეძახიან [[https://en.wikipedia.org/wiki/Artificial_neural_network][ANN(Artificial Neural Network)]] ხელოვნურ ნეირონულ ქსელებს,
მიმდინარეობს ასევე მეორე მიმართულებით მუშაობა, რომ შეიქმნას ისეთი კოპიუტერი, რომელიც თავისი სტრუქტურით 
მაქსიმალურად ახლოს იქნება ბუნებრივ ტვინთან, ასეთ კომპიუტერებს სხვანაირად ნეირომორფულ კომპიუტერებსაც ეძახიან.
მსგავსი ნეირონული ქსელის ან კომპიუტერის რაიმე ამოცანისთვის გამოყენება ხდება მისი სწავლებით. მაგალითად ჯერ ასწავლი თუ როგორ ამოიცნოს 
რაიმე საგანი სხვა საგნებისგან, სწავლების შემდეგ პროგრამა თვითონ ახდენს ნებისმიერი იგივე სახის ობოექტის ამოცნობას დამოუკიდებლად.
მაგალითად, დაწერეს ნეირონული ქსელი რომელსაც ასწავლეს სურათებზე კატების ამოცნობა, სწავლებისთვის გამოყენებული იყო სულ რამოდენიმე
ათეული სურათი. სწავლის შემდეგ პროგრამას შეუძლია ნებიესმიერი სურათიდან კატის ამოცნობა. მგავსი მეთოდითაა გაკეთებული თანამედროვე 
ხმის, სახის, ტელნაწერის ამოცნობის პროგრამები.

სამწუხაროდ დღემდე არ არსებობს ისეთი პროგრამა რომელიც ჩვენს ხმოვან ბრძანებებს მიიღებს როგორც დავალებას და გარდაქმნის
კომპიუტერისთვის გასაგებ ენაზე (არის გარკვეული მიღწევები, მაგრამ პროგრამირებისთვის ჯერ არ გამოიყენება). ამიტომ პროგრამის წერის
დროს აუცილებელია მიუთითოდ ყველა ის თანმიმიდევრობა, რომელიც პროგრამის შესრულებისთვის არის საჭირო.  

დღევანდელ დროს მდგომარეობა ასეთია, პროგრამისტმა იცის კომპიუტერის არქიტექტურა და მუშაობის ძირითადი პრინციპები. ამის 
შედაგად მას შეუძლია წინასწარ წარმოიდგინოს (გონებაში მოდელირება მოახდინოს) თუ როგორ გადაწყვიტავს კონკრეტულ ამოცანას კომპიუტერი,
ამის შემდეგ პროგრამისტი ჯდება და იწყებს პროგრამის წერას.

გამოდინარე აქედან სანამ პროგრამირების სწავლას დავიწეყებდეთ, კარგი იქნება თუ შემდეგ საფეხურებს გავივლით:

1. გავიგოთ ზოგადად კომპიუტერის არქიტექტურის და მუშაობის პრინციპი
2. დავიწყოთ პროგრამის წერა რაიმე მარტივი გარემოთი (როგორიცაა blockly, ვიზუალური პროგრამირების გარემო)
   ან თამაშებით მაგ. code.org -ზე მოცემული თამაშები. 
3. გვქონდეს რაიმე კონკრეტული მიზანი, თუ რისი დაწერა გვინდა, რაში გამოვიყენებთ პროგამირების ცოდნას. 
   უბრალიო მარტივი მიზანი, როგორიცაა "მიდა ვიყო პროგრამისტი" ვერანაირად ვერ დაგეხმარება ამ მიზნის მიღწევაში
4. სწავლის ყოველ საფეხურზე გქონდეს რაიმე პროექტი გასართობი ან უკვე პროფესიული რომელშიც შენს ნასწავლ ცოდნას გამოიყენებ.

იმაზე არაფერს დავწერ თუ, ინგლისური ენის ცოდნა რამდენად მნიშვენლობანია პროგრამირების სწავლის დროს. არ არის აუცილებელი 
რომ ინგლისური ენის არ ციდნა გახდეს დაბრკოლება პროგრამირების სწავლისთვის. არამედ ერთდოულად შეიძლება ორივე მიმართულებით
გავნითარება. 

ბოლოს დავასრულებ იმით რომ სწავლის პროცესი უნდა იყოს რეგულარული, ყოველ დღე თუნდაც 1 საათს თუ დაუთმობთ ერთი თვის განმავლობაში, ეს საკმარისი 
იქნება იმისთვის რომ რაიმე ისწავლოთ ისე რომ შეძლოთ მისი გამოყენება პრაქტიკული ამოცანებისთვის. 


* შესავალი პროგრამირებაში 

პროგრამირების ენებიდან პითონი ერთერთი ყველაზე მარტივად გასაგები და მძლავრი პროგრამირების ენაა.
პითონი მიეკუთვნება მრავალმიზნობრივ პროგრამირების ენას. პითონის საშუალებით შესაძლებელია შეიქმნას სხვადასხვა ტიპის პროგრამები, როგორებიცა: ვებსერვერული აპლიკაციები, 
მობილური აპლიცაციები, სერვერის ოპტიმიზაცია-კონფიგურაცისა და მართვის სკრიპტები, დესკტოპ(პერსონალურ კომპიუტერზე დაფუნძნებული)-აპლიკაციები.

გადა ამისა, პითონი მულტიპლათფორმული პროგრამირების ენაა, რაც გულისხმობს, რომ პითონის ინტერპრეტატორი/ვირტუალური მანქანა მუშობს ნებიემიერ პლატფორმაზე, 
მაგალითად: Linux, MacOS, Windows და ა.შ.

პითონის ინტერპრეტატორი და ვირტუალური პროგრამა შევიძლია წარმოვიდგინოთ, როგორც პროგრამა რომელიც ჩვენს დაწერილ კოდს ამუშავებს კომპიუტერზე


###### ჩვეულებრივ კომპიუტერში პროგრამა სრულდება თანმიმდევრობით, დროის გაკვეულ მომენტში სრულდება მხოლოდ ერთი ბრძანება მაგალითად:



** პითონის სასწავლო ინტერაქტიული საიტები

მოცემულ საიტებზე, შეგიძლიათ თამაშით ისწავლოთ პროგრამირება.
https://codecombat.com/play
https://groklearning.com/
https://www.codeavengers.com/profile#py1


** ინსტალაცია

ინსტალაცია ვინდოუსისთვის
გადადით ვებ გვერდზე https://www.python.org/downloads/ და გადმოიწერეთ უახლესი ვერსია მაგ. Python 3.5.2

ინსტალაციის დროს აუცილებლად მოვნიშნოთ
Add Python 3.5 to PATH
შემდეგ მიჰყევით სტანდარტულად next > next >  next


ინსტალაცია linux-debian/ubuntu-ზე

sudo apt-get install python3


** პითონის ინტერაქტიული ინტერპრეტატორი - შელი
პითონის დაინსტალირების შემდეგ გავხსნათ ტერმინალი ან თუ ვინდოუსია cmd და ავკრიფოდ python ენთერის დაჭერის შემდეგ გადავალთ პითონის შელში
და ტერმინალის მიმდინარე ხაზზე გამოჩნდება >>> ნიშანი, სტანდარტულად პითონის შელში ყოველი ხაზი იწყება მსგავსი ნიშნით.
პითონის შელით შეგვიძლია ვწეროთ პითონის სკრიპტები რომელიც შესრულდება მიმდინარე რეჟიმში ენთერის ყოველ დაჭერაზე. პითონის დეფაულთ ალტერნატივის გარდა
არსებობს მეტად ინტერაქტიული და სისტაქსს highlight-ის მქონე ipython შელი. მისი ინსტალაცია შესაძლებალია პითონის საინსტალაციო პაკეტ მენეჯერიდან.



** პითონის დეფაულთ აიდი IDLE
პითონის ინტერაქტიული შელით პროგრამის წერა საკმაოდ მოუხერხებელია. ამიტომ პროგრამის დასაწერად შეგვიძლია გამოვიყენოთ პითონის 
დაფაულთ IDLE IDE (Integrated development environment). IDLE არის პროგრამა რომელშიც შეგვიძლია დავწეროთ კოდი, დავიმახსოვროდ ფაილის სახით და გაუშვათ პითონის 
ინტერპრეტატორით. მოცემული ტექსტის ედიტორი არარი ცუდი დასაწყისისთვის, მაგრამ შემდგომ აუცილებელია რომელიმე ალტერნატიული ტექსტური ედიტორის გამოყენება 
როგორიცაა მაგალითად: Emacs, Vim, Notepad++, Atom და ა.შ.

** პირველი ნაბიჯები
გავხსნათ პითონის ინტერაქტიული ფანჯარა შემდეგნაირად:

მოცემულ ვიდეოში კარგად არის ახსნილი თუ როგორ გახსნათ ინტერაქტიული ინტერპრეტატორი და IDLE ტექსტური ედიტორი
https://www.youtube.com/watch?v=kXbpB5_ywDw


უკვე ტარადიციაა რომ პროგრამირების ენის შესწავლის პროცესი იწყება, ეკრანზე 'hello, world'-ის დაწერით. 
პითიონით კონსოლზე (ეკრანზე სადაც ტექტი იწერება) ინფორამციის გამოტანა ხდება print ფუნქციით მაგ.

print('hello, world')

ეკრანზე დაწერს 'hello, world'-ს

მნიშვნელოვანია აღინიშნოს, რომ print-ის შიგნით ტექსტი მოთავსებულია ერთკბილიანი ბრჭყალების მაგ. 'hello, world'
ესევე შესაძლებელია ტექსტი ჩაიწეროს ორკბილიანი ბრჭყალით შემდეგნაირად "hello, world". 

ტექსტის სწორი და არასწორი ჩაწერის შემთხვევები

სწორია
print('hello, world')

სწორია
print("hello, world")

არასწორია, ქვემოთ მოყვანილი ორივე შემთხვევა
print("hello, world)
print('hello, world)
რადგან ტექსტის ბოლოს ბრჭყალი არ არის დახურული


არასწორია
print(hello, world)
რადგან ტექსტი მოცემულია ბრჭყალების გარეშე

არასწორია
print('hello, world")
print("hello, world')
რადგან ტექსტი მოცემულია სხვადასხვა ტიპის ბრჭყალების შიგნით


** ცვლადები

პროგამირების ენებში ცვლადი შეგვიძლია წარმოვიდგინოთ, როგორც რაიმე ადგილი სადაც დროებით ვინახავთ ინფორმაციას. 
გარგად გასაგებად კონპიუტერის მეხსიერებას შევადარებ საწყობს, ხოლო ცვლადებს შევადარებ ყუთებს სადაც სხვადასხვა 
სახის ინფორმაციაა მოთავსებული.
პროგრამის წერის დროს შესაძლებელია გამოვყოთ ინფორმაციის რამოდენიმე სახე მაგალითად:
მთელი რიცხვი (integer)  როგორიცაა 1, 3, 4, 6, 101, და ა.შ.,
ათწილადი რიცხვები (float) როგორიცაა 0.3, 4.5, 23.89293, და ა.შ.,
ტექსტი (string), ნებისმიერი სიმბოლოების თანმიმდევრობა, მაგალითად string-ის მაგალითებია: 'amsak323', "asd22323qweq", '234324', 'asjfjdsi', ....
ბულის ტიპის ინფორმაცია, რომლიც მხოლოდ ორ მნიშვნელობას იღება True (ჭეშმარიტი) ან False(ცრუ/არაჭეშმარიტი).

როგორც უკვე მიხვდით, ჩვენს მიერ ზემოთ დაწერილი ტექსტი "hello, world" არის string-ის ტიპის ინფორმაცია

ისევე როგორც საწყობში ყველა ყუთს აქვს ზედ დაწერილი უნიკალური დასახელება, ასევე პროგრამის მეხსიერებაში შენახულ ცვლადებსაც აქვს სახელები. 
მოდი ვნახოთ თუ როგორ შეგვიძლია შევქმანთ ცვლადები.

შევქმანათ ცვლადი და მას მივანიჭოთ რაიმე კონკრეტული სახელი

a = 13

სადაც a არის ცვლადის დასახელება, ხოლო 13 მისი მნიშვნელობა.
ასევე შეგვიძლია a  ცვლადში შევინახოთ ხვა მნიშვნელობა მაგალითად

print(a)

print(a) ეკრანზე გამოგვიტანს ცვლადის მნიშვნელობას, /ყურადგება მიაქციეთ a-ს ჩანაწერს print-ის შიგნით, ის არ არის ბრჭყალებით ჩაწერილი (როგორც მაგალითად 'hello, world')/
ეს იმიტომ, რომ a ტექსტი კი აღარ არი არამედ, ცვლადის დასახელებაა.

a = 92
print(a)

იგივე სახით ხდება სხვა ტიპის ცვლადისთვის ინფორმაციის მინიჭება, მაგ

f = 3.5
print(f)

f = 4.5
print(f)


ასევე არსებობს ეგრედ წოდებული ბულის ტიპის ცვლადები, რომელმაც შეიძლება მიიღოს მხოლოდ ორი მნიშვნელობა True (ჭეშმარიტი) ან False(ცრუ/არაჭეშმარიტი).

b = Ture 
print(b)

b = False
print(b)

** ოპერატორები

პითონით შეგვიძლია მოვახდინოთ მატემეტიკური გამოთვლები როგორიცაა: მიმატება, გამრავლება, გაყოფა, ახარისხება და ა.შ
ჩამოვწეროთ ძირითადი ოპერატორები და მისი მატემატიკური განმარტებები


+,  მიმატება
-,  გამოკლება
*,  გამრავლება
/,  გაყოფა
**, ხარისხში აყვანა


მაგალითად 

3 + 5

45 - 5

5 * 5

12 / 2

3 * 3


ასევე მსგავსი მოქმედებები შეგვიძლია ჩავატაროდ ცვლადების სახითაც 
მაგალითად

a = 34

b = 14

c = a - b
print(c)

** input ფუნქცია

input ფუნქცია დანიშნულია, ინფორმაციის ინტერაქტიულ რეჟიმში შესატანად
მაგ:

name = input('What's your name?:')
print('How are you '+name)

ტერმინალზე დაწერს შეკითხვას 'What's your name?:', პასუხის ჩაწერის და ენთერზე დაჭერის შემდეგ, ტერმინალზე დაიწერება

How are you Zigmund


 
